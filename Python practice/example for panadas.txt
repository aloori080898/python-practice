import pandas
print("successfully imported")
---------------------------------------------------------------------------------------------
import pandas as pd
print(dir(pd))
---------------------------------------------------------------------------------------------
import pandas as pd
s = pd.Series()
print(s)
print(type(s))
---------------------------------------------------------------------------------------------
s = pd.Series(a)

1. object creation
2. Series is class
3. a parameter
4. Series is existing pandas
5. alisasing pd
6. s is object
7. During object creation: constructor will execute
---------------------------------------------------------------------------------------------
import pandas as pd
a = [10,20,30,40,50]
s = pd.Series()
print(a)
print(s)
---------------------------------------------------------------------------------------------
Python	-	Daniel	-	string/str
pandas	-	Daniel	-	object

---------------------------------------------------------------------------------------------
import pandas as pd
a = [10,20,30,40,50]                  adding different value in index position
a[0]=99
s = pd.Series()
print(a)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd
a = [10,20,30,40,50]
b = ["raju","praveen","charan","karthik","vamshi"]
s = pd.Series()
print(a)
print(b)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                          empty series object
s = pd.Series()
print(s)
print(type(s))
-------------------------------------------------------------------------------------------
import pandas as pd                        Creating Series by using list
a = [10,20,30,40,50]                           
s = pd.Series(a)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                       unexpected keyword argument
a = [10,20,30,40,50]
s = pd.Series(a,car ="bike")
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                  creating Series object using list, assigning a name                       
a = [10,20,30,40,50]
s = pd.Series(a,name ="bike")
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd
a =["raju","praveen","charan","karthik","vamshi"] 
s = pd.Series(a,name ="students")
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd             creating Series object by using range and list.     
r = range(20,250)
a = list(r)
s = pd.Series(a)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                     creating series
a = [10,20,30,40,50]
s = pd.Series(a)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                 Creating Series object and giving name
a = [10,20,30,40,50]
s = pd.Series(a,name = 'raju')
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                 Creating Series object and giving name and index
a = [10,20,30,40,50]
c = [2,4,5,6,7]
s = pd.Series(a,name = 'raju',index = c)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd           Creating Series object and giving name and index
prices = [1000, 2000, 3000, 4000]
products = ["Nokia", "Samsung", "Oppo", "iPhone 6"]
s = pd.Series(prices, name = 'mobiles', index = products )
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                   Creating Series object and giving name and index
prices = [1000, 2000, 3000, 4000]
books= ["kapil", "class mate", "smile", "ready"]
s = pd.Series(prices, name = 'books', index = books)
print(s)
-------------------------------------------------------------------------------------------
The package folder contains a special file called __init__.py, which stores the package's content. It serves two purposes:

1)The Python interpreter recognizes a folder as the package if it contains __init__.py file.
2)__init__.py exposes specified resources from its modules to be imported.
-------------------------------------------------------------------------------------------
Pandas Series class documentation
s = pd.Series()
s = pd.Series(a)
s = pd.Series(a, name = "Mobiles")
s = pd.Series(prices, name = "Mobiles", index = products)

Pandas Series class documentation

-------------------------------------------------------------------------------------------
import pandas as pd              checking the value by using index              

prices = [1000, 2000, 3000, 4000]
products = ["Nokia", "Samsung", "Oppo", "iPhone 6"]
s = pd.Series(prices, name = "Mobiles", index = products)
print(s)
print(s["Nokia"])
print(s["Samsung"])

-------------------------------------------------------------------------------------------
Python		empty value	None		NoneType

Pandas		empty value	NaN		float
		missing value

-------------------------------------------------------------------------------------------
int + int 		=> int
int + float 	=> float
-------------------------------------------------------------------------------------------
import pandas as pd
a = [10,20,30,40,50,60]
s = pd.Series(a)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                         by using nan(not a number)
a = [10,20,30,None,50,60]
s = pd.Series(a)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd                                by using character
a = ["raju","praveen","karthik",None,"vishal"]
s = pd.Series(a)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd
a = ["raju",20,"karthik",None,10]
s = pd.Series(a)
print(s)
-------------------------------------------------------------------------------------------
import pandas as pd
a = ["raju",20," ",None,10]
s = pd.Series(a)
print(s)
-------------------------------------------------------------------------------------------
class Student:
	def __init__(self, sno, sname):
		self.sno = sno
		self.sname = sname
	def display(self):
		print("This is method")
s1 = Student(101, "Nireekshan")
print(s1.sno)                                   #   attribute with no parenthesis
print(s1.sname)                                 #   attribute with no parenthesis
s.display()                                     #    parenthesis required
-------------------------------------------------------------------------------------------
                              	Attribute in series
1) values                 ---------------
---------
import pandas as pd
a = [10, 20, 30, 40, 50]
s = pd.Series(a)
print("Data: Collecting the data in series by using object - s, get data from s")
print()
print(s.values)
-------------------------------------------------------------------------------------------
2) index
--------
import pandas as pd
a = [10, 20, 30, 40, 50]
s = pd.Series(a)
print("Data: Collecting the data in series by using object - s, get data from s")
print()
print(s.index)

output:-RangeIndex(start=0, stop=5, step=1)
-------------------------------------------------------------------------------------------
import pandas as pd                    By using index=i
a = [10, 20, 30, 40, 50]
i =[4,5,6,7,8]
s = pd.Series(a,index=i)
print("Data: Collecting the data in series by using object - s, get data from s")
print()
print(s.index)

-------------------------------------------------------------------------------------------
Type error
----------
import pandas as pd
a = [10, 20, 30, 40, 50]
i =[4,5,6,7,8]
s = pd.Series(a,index1223421=i)
print("Data: Collecting the data in series by using object - s, get data from s")
print()
print(s.index)
-------------------------------------------------------------------------------------------
Attribute error
---------------
import pandas as pd
a = [10, 20, 30, 40, 50]
i =[4,5,6,7,8]
s = pd.series(a,index=i)
print("Data: Collecting the data in series by using object - s, get data from s")
print()
print(s.index)
-------------------------------------------------------------------------------------------
3) size
--------
import pandas as pd
a = [10, 20, 30, 40, 50]
s = pd.Series(a)
print("Data: Collecting the data in series by usinf object - s, get data from s")
print()
print(s.size)
print(len(a))
-------------------------------------------------------------------------------------------
4) dtype
---------
import pandas as pd
a = [10, 20, 30, 40, 50]
s = pd.Series(a)
print("Data: Collecting the data in series by usinf object - s, get data from s")
print()
print(s.dtype)
-------------------------------------------------------------------------------------------
s.values
s.index
s.dtypes
s.size
print(dir(s))   we can verify these attribute available in the series by  using dir

                  1) Attribute :- returns information
		  2) Methods   :- perform an operation       
-------------------------------------------------------------------------------------------
                            Method in methods
                           -------------------
1) Head method:-  It returns top five values from the list
--------------
import pandas as pd
a = [10, 20, 30, 40, 50,60,70,80,90,100]
s = pd.Series(a)
print(s.head())
-------------------------------------------------------------------------------------------
2) Tail method:- It returns bottom five values from the list
--------------
import pandas as pd
a = [10, 20, 30, 40, 50,60,70,80,90,100]
s = pd.Series(a)
print(s.tail())
-------------------------------------------------------------------------------------------
3)Sum method:- It returns sum values from the list
------------
import pandas as pd
a = [10, 20, 30, 40, 50,60,70,80,90,100]
s = pd.Series(a)
print(s.sum())
-----------------------------------------------------------------------------------------
4) Mean method:-It returns average values from the list
---------------
import pandas as pd
a = [10, 20, 30, 40, 50,60,70,80,90,100]
s = pd.Series(a)
print(s.mean())
-------------------------------------------------------------------------------------------
5)Count method:-It returns how many values present in the list
--------------
import pandas as pd
a = [10, 20, 30, 40, 50,60,70,80,90,100]
s = pd.Series(a)
print(s.count())
-------------------------------------------------------------------------------------------
           what is difference between size() and count() ?
count():- it will ignore the missing values
-------
import pandas as pd
a = [10, 20, 30,None,70,80,90,100]
s = pd.Series(a)
print(s.count())

size():- total value count
-------
import pandas as pd
a = [10, 20, 30,None,70,80,90,100]
s = pd.Series(a)
print(s.size)
--------------------------------------------------------------------------------
6) Describe() method:-
---------------------
import pandas as pd
a = [10,20,30,40,50,60,70]
s = pd.Series(a)
print(s.describe())
--------------------------------------------------------------------------------
import pandas as pd
a = [10,20,30,40,50,60,70,10,10,10,10]
s = pd.Series(a)
print(s.describe().round(2))
--------------------------------------------------------------------------------
7) unique() method:-
------------------
import pandas as pd
a = [10,20,30,40,50,60,70,10,10,10,10]
s = pd.Series(a)
print(s.unique())
--------------------------------------------------------------------------------
8) nunique() method:
--------------------
import pandas as pd
a = [10,20,30,40,50,60,70,10,10,10,10]
s = pd.Series(a)
print(s.nunique())
--------------------------------------------------------------------------------
class Bank:
    def balance(self):
        print("hi")
        return 100
a = Bank()
b = a.balance() 
print(b)
--------------------------------------------------------------------------------
d =[10,10,10,10,40,50,60,70]
e = d.count(10)
print(e)
--------------------------------------------------------------------------------
class Amazon:
    def shopping(self,prod):
        print("products is:",prod)
amz = Amazon()
amz.shopping(prod = "iphone")
--------------------------------------------------------------------------------
class Amazon:
    def shopping(self,prod):
        print("products is:",prod)
amz = Amazon()
amz.shopping(a = "iphone")

output:- an unexpected keyword argument 'a'
--------------------------------------------------------------------------------
import pandas as pd
a = [13,24,56,70,75,65]
s = pd.Series(a, name = "raju")
print(s)
--------------------------------------------------------------------------------
import pandas as pd
a = [13,24,56,70,75,65]
s = pd.Series(a, a = "raju")
print(s)

output:-an unexpected keyword argument 'a'
--------------------------------------------------------------------------------
n = [1,2,3]
for i in n:
    n.append(i)
    n.remove(i)
print(n)
--------------------------------------------------------------------------------
class Dog:
    def __init__(self,name,age):
         self.name = name
         self.age = age
my_dog = Dog('Buddy',4)
print(my_dog.name)
print(my_dog.age)
--------------------------------------------------------------------------------
def is_prime(num):             verification of prime number
    """check if a number is prime(divisible only by 1 an d itself)"""
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
      if num % i == 0:
         return False
num = int(input("Enter a number:"))
if is_prime(num):
    print(num,"is a prime number")
else:
    print(num, "is not a prime number")
--------------------------------------------------------------------------------
pairs = [(1,4),(2,3),(4,1),(3,8)]    sorting a list of tuples
sort_pairs = sorted(pairs, key=lambda x:x[1])
print(sort_pairs)
--------------------------------------------------------------------------------
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

model_name = "microsoft/DialoGPT-small"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

def generate_response(user_input, chat_history_ids):
    new_user_input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')

    bot_input_ids = torch.cat([chat_history_ids, new_user_input_ids], dim=-1) if chat_history_ids is not None else new_user_input_ids

    chat_history_ids = model.generate(bot_input_ids, max_length=1000, pad_token_id=tokenizer.eos_token_id)

    response = tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)
    return response, chat_history_ids

def chatbot():
    print("Hi! I'm a chatbot. Type 'exit' to quit.")
    chat_history_ids = None
    while True:
        user_input = input("You: ")
        if user_input.lower() == 'exit':
            print("Chatbot: Goodbye!")
            break

        response, chat_history_ids = generate_response(user_input, chat_history_ids)
        print("Chatbot:", response)

# Run the chatbot
if __name__ == "__main__":
    chatbot()


--------------------------------------------------------------------------------
numbers = [1,2,3,4,5,6,7,8,9]           filtering a list
even_numbers = list(filter(lambda x:x %2 == 0, numbers))
print(even_numbers)
--------------------------------------------------------------------------------
numbers = [1,2,3,4,5]    list comprehension by using lambda
squared_numbers = [(lambda x:x**2)(x) for x in numbers]
print(squared_numbers)
--------------------------------------------------------------------------------
def operate_on_numbers(x,y, operation):     high-order functions by using lambda
     return operation(x,y)
result = operate_on_numbers(10,5, lambda x,y :x/y)
print(result)
--------------------------------------------------------------------------------
words = ['apple','kiwwi','orange']            key function using lambda
sorted_words = sorted(words, key = lambda x: len(x))
print(sorted_words)
--------------------------------------------------------------------------------
calculator = {                             function on the fly
     'add' : lambda x,y :x+y,
     'subtract' : lambda x,y : x-y,
     'multiply' : lambda x,y : x*y,
     'divide' : lambda x,y : x/y,
}
result = calculator['add'](4,5)
print(result)
--------------------------------------------------------------------------------
add = lambda x,y :x+y
subtract = lambda x,y : x-y               simple arithmetic operation
multiply = lambda x,y : x*y
divide = lambda x,y : x/y
print(add(2,4))
print(subtract(3,7))
print(multiply(2,4))
print(divide(5,6))

--------------------------------------------------------------------------------
num = eval(input("Enter a number: "))          checking the prime number 
sum1 = 0
if num == 1:
    print(num, "is not a prime number")
elif num > 1:
    for i in range(2, num):
        if (num % i) == 0:
            sum1 = 1
            break
if sum1:
    print(num, "is  not a prime number")
else:
    print(num, "is a prime number")
--------------------------------------------------------------------------------
class Employee:                      built-in class attribute
    def __init__(self,name ,id):
        self.name = name
        self.id = id
    def details(self):
        print("Employee name is: {self.name}")
        print("Employee id is: {self.id}")
e = Employee("raju",233)
e.details()
print(e.__doc__)
print(e.__dict__)
print(e.__class__)
--------------------------------------------------------------------------------
def fibo(n):
    a = 0
    b = 1
if n == 0:
    return a
elif n == 1:
    return b
else:
	return fibo(n-1) + fib0(n-2)
n = int(input('Enter a number'))
l = [str(fibo(i)) for i in range(0, n+1)]
print(l)
print(','.join(1))
--------------------------------------------------------------------------------
Predefined functions
-------------------
1. print(p)		->	To display output
2. type(p)		->	To check the data type
3. range(p)	->	To get range of values
4. input(p)		->	To take value at runtime/dynamically
5. len(p)		->	To get count of values

6. int(p)		->	To convert into integer value
7. float(p)		->	To convert into float value
8. list(p)		->	To convert into list
9. tuple(p)		->	To convert into tuple value
10. set(p)		->	To convert into set value

11. dir(p)		->	To get methods from class
--------------------------------------------------------------------------------
df = pd.DataFrame()

df		->	Name of the object to DataFrame class
DataFrame	->	Name of the class in pandas

df = pd.DataFrame()	->	Creating an object

IMP point		->	During object creation constructor will execute
--------------------------------------------------------------------------------
DataFrame:-
---------
import pandas as pd 
df = pd.DataFrame()
print(df)
print(type(df))
--------------------------------------------------------------------------------
import pandas as pd 
a = [11,21,12,33,45,56]
df = pd.DataFrame(a)
print(df)
--------------------------------------------------------------------------------
import pandas as pd 
names = ["Ranjan", "Sagar", "Daniel", "Prasad", "Kumari", "Pravallika", "Arjun", "Akshay"]
df = pd.DataFrame(names)
print(df)
--------------------------------------------------------------------------------
import pandas as pd              by using length
import pandas as pd 
names = ["Ranjan", "Sagar", "Daniel", "Prasad", "Kumari", "Pravallika", "Arjun", "Akshay"]
df = pd.DataFrame(names)
print(df)
print()
print(len(df))
--------------------------------------------------------------------------------
import pandas as pd                        with list comprehension 

details = [
	["Ranjan", 11],
	["Sagar", 12],
	["Daniel", 13],
	["Prasad", 14],
	["Kumari", 15],
	["Pravallika", 16],
	["Arjun", 17],
	["Akshay", 18]
]
print(details)
--------------------------------------------------------------------------------
import pandas as pd               with list comprehension by using dataframe

details = [
	["Ranjan", 11],
	["Sagar", 12],
	["Daniel", 13],
	["Prasad", 14],
	["Kumari", 15],
	["Pravallika", 16],
	["Arjun", 17],
	["Akshay", 18]
]
df = pd.DataFrame(details)
print(df)

--------------------------------------------------------------------------------
import pandas as pd

details = [                         adding name ,age, salary to the columns
	["Sagar", 20, 10000],
	["Daniel", 16, 20000],
	["Veeru", 24, 30000],
	["Raju", 25, 40000],
	["Kiran", 26, 50000],
	]

c = ["Name", "Age", "Salary"]

df = pd.DataFrame(details, columns = c)

print(df)
--------------------------------------------------------------------------------
from pandas import DataFrame       with using import pandas as pd
                                    by using from keyword
details = [
	["Sagar", 20, 10000],
	["Daniel", 16, 20000],
	["Veeru", 24, 30000],
	["Raju", 25, 40000],
	["Kiran", 26, 50000],
	]

c = ["Name", "Age", "Salary"]

df = DataFrame(details, columns = c)

print(df)
--------------------------------------------------------------------------------
from pandas import DataFrame            adding column and index

details = [
	["Sagar", 20, 10000],
	["Daniel", 16, 20000],
	["Veeru", 24, 30000],
	["Raju", 25, 40000],
	["Kiran", 26, 50000],
	]

c = ["Name", "Age", "Salary"]
i = [1,2,3,4,5]
df = DataFrame(details, columns = c, index=i)
print(df)
--------------------------------------------------------------------------------
from pandas import DataFrame          by using comprehension method

details = [
	["Sagar", 20, 10000],
	["Daniel", 16, 20000],
	["Veeru", 24, 30000],
	["Raju", 25, 40000],
	["Kiran", 26, 50000],
	]

c = ["Name", "Age", "Salary"]
i = [1,2,3,4,5]
df = DataFrame(details,
               columns = c,
               index=i
               )
print(df)
--------------------------------------------------------------------------------
df = pd.read_csv("sales1.csv")

- read_csv	->	predefined function in pandas
		->	this function having return in backend

--------------------------------------------------------------------------------
Loading files
-------------
we should create a folder in that add loading file to folder.
create a file and write code

import pandas as pd
df = pd.read_csv("example\sales1.csv")
print(df)
--------------------------------------------------------------------------------
import pandas as pd              square number
num = int(input("Enter a number:"))
multiplier = list(range(1,11))
df = pd.DataFrame({num: [num * i for i in multiplier]})
print(df.to_string(header=False, index=False))
-------------------------------------------------------------------------------------------
num = int(input("Enter a number:"))              even or  odd number
if num % 2 == 0:
    print(num,"i even")
else:
    print(num,"is odd")
-------------------------------------------------------------------------------------------
char = input("Enter a number:").lower()                vowels and consonant identification
if char in 'aieou':
    print(char,"i vowel")
else:
    print(char,"is consonant")
-------------------------------------------------------------------------------------------
class DataFrame:
    def m1(self):                it returns the dataframe
        print("hello")
    def read_csv():
        print("hi")
        d = DataFrame()
        return d
d = DataFrame()
d.m1()
-------------------------------------------------------------------------------------------
class Raju:
    def m1(self):
        print("hello")
    def read_csv():
        print("hi")
        d = DataFrame()
        return d
r = Raju()
r.m1()
-------------------------------------------------------------------------------------------
import pandas as pd                    to load different files

df1 = pd.read_csv("sales1.csv")      csv(comma separated values file)
df2 = pd.read_json("sales1.json")    json (java script object notation)
df3 = pd.read_table("sales1.tsv")    tsv (table separated file)
print(df1)
print()
print(df2)
print()
print(df3)
print()
-------------------------------------------------------------------------------------------
import pandas as pd                         length function
df1 = pd.read_csv("sales1.csv")
print(len(df1))
-------------------------------------------------------------------------------------------
csv file		->	df1.read_csv("sales1.csv")
json file		->	df2.read_json("sales1.json")
excel file		->	df3.read_excel("name of the file with extension")
tsv file		->	df4.read_table("sales1.tsv")
table in website	->	df5.read_html("url")
-------------------------------------------------------------------------------------------
import pandas as pd
url = "https://en.wikipedia.org/wiki/The_World%27s_Billionaires"
a = pd.read_html(url)
print(a[2])
a[2].to_csv("output.csv")
-------------------------------------------------------------------------------------------
import pandas as pd                  excel file
df = pd.read_excel("sales1.xlsx")  
print(df)
print()
-------------------------------------------------------------------------------------------
import pandas as pd                 
df1 = pd.read_csv("sales1.csv")     
df2 = pd.read_json("sales1.json")    
df3 = pd.read_table("sales1.tsv") 
df4 = pd.read_excel("sales1.xlsx")  
print(df1)
print()
print(df2)
print()
print(df3)
print()
print(df4)
print()
-------------------------------------------------------------------------------------------
import pandas as pd
import random
import string

def generate_name():
    first_name = ''.join(random.choices(string.ascii_uppercase, k=5))
    last_name = ''.join(random.choices(string.ascii_uppercase, k=7))
    return f"{first_name} {last_name}"

data = {
    'ID': range(1, 1001),
    'Name': [generate_name() for _ in range(1000)],
    'Age': [random.randint(18, 80) for _ in range(1000)]
}

df = pd.DataFrame(data)

df.to_excel('members_data.xlsx', index=False, engine='openpyxl')

print("Excel file 'members_data.xlsx' created successfully!")
--------------------------------------------------------------------------------
import pandas as pd
import random
import string


def generate_name():
    first_name = ''.join(random.choices(string.ascii_uppercase, k=5))
    last_name = ''.join(random.choices(string.ascii_uppercase, k=7))
    return f"{first_name} {last_name}"

data = {
    'ID': range(1, 1001),
    'Salary': range(1, 1001),
    'Booking transction': range(1, 1001),
    'Name': [generate_name() for _ in range(1000)],
    'Age': [random.randint(18, 80) for _ in range(1000)]  
}

df = pd.DataFrame(data)

df.to_excel('members_data.xlsx', index=False, engine='openpyxl')

print("Excel file 'members_data.xlsx' created successfully!")
--------------------------------------------------------------------------------
import pandas as pd
df = pd.read_csv("output4.csv")
print(df)
print(df.columns)
print(df.shape)
print(len(df))
--------------------------------------------------------------------------------
import pandas as pd                     to convert csv to json file

input_csv_file = 'input.csv'
output_json_file = 'output2.json'

df = pd.read_csv("output3.csv")

df.to_json(output_json_file, orient='records', lines=True)

print(f"CSV file has been converted to JSON and saved as {output_json_file}")
-------------------------------------------------------------------------------------------
import pandas as pd                    to convert json to excel

input_json_file = 'input.json'
output_excel_file = 'output.xlsx'

df = pd.read_json('praveen2.json', lines=True)

df.to_excel('vamshi2.xlsx',index=False)

print(f"JSON file has been converted to Excel and saved as {'vamshi2'}")

-------------------------------------------------------------------------------------------import pandas as pd                                      to convert csv to tsv
input_csv_file = 'input.csv'
output_tsv_file = 'output.tsv'

df = pd.read_csv('raju3.csv')

df.to_csv('karthik2.tsv', sep='\t', index=False)

print(f"CSV file has been converted to TSV and saved {'karthik2'}")

-------------------------------------------------------------------------------------------
Attribute in DataFrame
---------------------
import pandas as pd                          1) columns attribute             
df = pd.read_csv("sales1.csv")
print(df.columns)
print()
-------------------------------------------------------------------------------------------
import pandas as pd                          2) shape attribute
df = pd.read_csv("sales1.csv")
print(df.shape)
print()
-------------------------------------------------------------------------------------------
import pandas as pd                          to_string  it return each and every value
df = pd.read_csv("sales1.csv")
print(df.to_strnig())
-------------------------------------------------------------------------------------------
import pandas as pd                          3) size attribute:- df.size (or) rows x columns
df = pd.read_csv("sales1.csv")
print(df.size)
                               (or)
import pandas as pd
df = pd.read_csv("sales1.csv")
print(df.shape[0] * df.shape[1])
print(df.size)
-------------------------------------------------------------------------------------------
import pandas as pd                            4) dtypes attribute:-
df = pd.read_csv("sales1.csv")
print(df.dtypes)
-------------------------------------------------------------------------------------------
import pandas as pd                         5) empty attribute:-
df = pd.read_csv("sales1.csv")
print(df.empty)
-------------------------------------------------------------------------------------------
import pandas as pd                        6) values attribute:-
df = pd.read_csv("sales1.csv")
print(df.values)
-------------------------------------------------------------------------------------------
import pandas as pd                         7) index attribute:-
df = read_csv("sales1.csv")
print(df.index)
-------------------------------------------------------------------------------------------
import pandas as pd                         8) T attribute:-
df = pd.read_csv("sales1.csv")
print(df.T)
-------------------------------------------------------------------------------------------
Methods in DataFrame:-
--------------------
import pandas as pd                     1) head method:- it returns top five values
df = pd.read_csv("sales1.csv")
print(df.head())
-------------------------------------------------------------------------------------------
import pandas as pd                     2) tail method:- it returns bottom  values
df = pd.read_csv("sales.csv")
print(df.tail())
-------------------------------------------------------------------------------------------
import pandas as pd                       3)info method:-
df = pd.read_csv("sales.csv")
df.info
-------------------------------------------------------------------------------------------
import pandas as pd                         4) describe method:- 
df = pd.read_csv("sales.csv")
print(df.describe())
-------------------------------------------------------------------------------------------
import pandas as pd                        5) count method:-
df = pd.read_csv("sales.csv")
print(count())
-------------------------------------------------------------------------------------------
import pandas as pd                         6) nunique method:-
df = pd.read_csv("sales.csv")
print(df.nunique())
-------------------------------------------------------------------------------------------
import pandas as pd                                    Dataframe:-
df = pd.read_csv("sales1.csv")                        -----------
print(df.columns)                                    attribute
print(df.shape)
print(df.size)
print(df.dtypes)
print(df.empty)
print(df.values)
print(df.index)
print(df.T)
print(df.to_string())
print(df.head())                                      methods
print(df.tail())
print(df.count())
print(df.describe())
print(df.nunique())
df.info()

import pandas as pd                                    series 
a = [1,2,34,5,6,7,788,98,990,11,2,222,3334,566]       --------
s = pd.Series(a)
print(s.values)                                          attribute
print(s.index)
print(s.dtypes)
print(s.size)
print(s.head())                                          methods
print(s.tail())
print(s.sum())
print(s.count())
print(s.describe())
print(s.max())
print(s.min())
print(s.mean())
print(s.unique())
print(s.nunique())
-------------------------------------------------------------------------------------------
class Employee:
    def __init__(self,sno,sname):
        self.sno = sno
        self.sname = sname
    def display(self):
         print("employee no",{self.sno})
         print("employee name",{self.sname})
    def m1(self):
        print("hello")
        print("hi")
    def raju(self):
        print("going")
        print("or")
class Order:
    def __init__(self,sno,sname,sage):
        self.sno = sno
        self.sname = sname
        self.sage = sage
    def event(self):
        print("order no",self.sno)
        print("order name",self,sname)
        print("order age",self.age)
    def m2(self):
        print("doing")
        print("and")
class Sportmen():
    def __init__(self,sno,sname):
        self.sno = sno
        self.sname = sname
    def details(self):
        print("sportmen no",self.sno)
        print("sportmen name",self.sname)
    def m3(self):
        print("coming")
        print("diplay")
        print("details")
    def m4(self):
        print("tp")
        print("fps")
e = Employee(101,"praveen")
e1 = Employee(100,"raju")
e.display()
e.m1()
e.raju()
o = Order(201,"karthik",23)
o1 = Order(202,"lavan",25)
o.m2()
s = Sportmen(18,"virat")
s2 = Sportmen(7,"dhoni")
s.details()
s2.details()
s.m3()
s.m4()

import pandas as pd 
df = pd.read_csv("sales1.csv")
print(df)
print(df.columns)
print(df.shape)
print(df.size)
print(df.dtypes)
print(df.empty)
print(df.values)
print(df.index)
print(df.T)
print(df.head())
print(df.tail())
print(df.count())
print(df.describe())
print(df.nunique())
print(df.to_string())
df.info()

import pandas as pd
a = [1,2,3,45,6,7,8,9]
s = pd.Series(a)
print(s)
print(s.values)
print(s.index)
print(s.size)
print(s.dtypes)
print(s.head())
print(s.tail())
print(s.count())
print(s.describe())
print(s.mean())
print(s.max())
print(s.min())
print(s.sum())
print(s.unique())
print(s.nunique())
------------------------------------------------------------------------------------------
class Employee:
    def __init__(self,sno,sname):
        self.sno = sno
        self.sname = sname
    def display(self):
         print("employee no",{self.sno})
         print("employee name",{self.sname})
    def m1(self):
        print("hello")
        print("hi")
    def raju(self):
        print("going")
        print("or")
class Order:
    def __init__(self,sno,sname,sage):
        self.sno = sno
        self.sname = sname
        self.sage = sage
    def event(self):
        print("order no",self.sno)
        print("order name",self,sname)
        print("order age",self.age)
    def m2(self):
        print("doing")
        print("and")
class Sportmen():
    def __init__(self,sno,sname):
        self.sno = sno
        self.sname = sname
    def details(self):
        print("sportmen no",self.sno)
        print("sportmen name",self.sname)
    def m3(self):
        print("coming")
        print("diplay")
        print("details")
    def m4(self):
        print("tp")
        print("fps")
e = Employee(101,"praveen")
e1 = Employee(100,"raju")
e.display()
e.m1()
e.raju()
o = Order(201,"karthik",23)
o1 = Order(202,"lavan",25)
o.m2()
s = Sportmen(18,"virat")
s2 = Sportmen(7,"dhoni")
s.details()
s2.details()
s.m3()
s.m4()

import pandas as pd 
df = pd.read_csv("sales1.csv")
print(df)
print(df.columns)
print(df.shape)
print(df.size)
print(df.dtypes)
print(df.empty)
print(df.values)
print(df.index)
print(df.T)
print(df.head())
print(df.tail())
print(df.count())
print(df.describe())
print(df.nunique())
print(df.to_string())
df.info()

import pandas as pd
a = [1,2,3,45,6,7,8,9]
s = pd.Series(a)
print(s)
print(s.values)
print(s.index)
print(s.size)
print(s.dtypes)
print(s.head())
print(s.tail())
print(s.count())
print(s.describe())
print(s.mean())
print(s.max())
print(s.min())
print(s.sum())
print(s.unique())
print(s.nunique())


c = [10,20,30,40,50,49,60,70]
c = c.append(23)             we have assign the varaiable with return statement
print(c)                     we should assign the varaiable without return statement
c = c.insert(0,33)
print(c)
------------------------------------------------------------------------------------------
renaming the columns:-
---------------------
it is used for the change columns in data frame
# when ever changing the columns key should be matched
#We need to use python dictionary to specify old column as key and new
column as value.
import pandas as pd
df = pd.read_csv("sales1.csv")
print(df.head())
print()
print(df.columns)
-------------------------------------------------------------------------------------
print("="*50) 

import pandas as pd
df1 = pd.read_csv("sales3.csv")
d = {
     "ord id" : "Order id",
     "cust id" : "Customer id"
}
df2 = df1.rename(columns=d)
print(df1.head())
print()
print(df2.head())
------------------------------------------------------------------------------------------
creating a sample dataframe
import pandas as pd
d = {
"order_id": [11, 21, 31],
"customer_name": ["Prasad", "Daniel", "Jeswanth"],
"product": ["iPhone", "hTC", "macbook"]
}
i = {0:22,1:33,2:44}
df1 = pd.DataFrame(d)
print(df1)
------------------------------------------------------------------------------------------
changing the index in dataframe
import pandas as pd
d = {
"order_id": [11, 21, 31],
"customer_name": ["Prasad", "Daniel", "Jeswanth"],
"product": ["iPhone", "hTC", "macbook"]
}
i = {0:22,1:33,2:44}
df1 = pd.DataFrame(d)
df2 = df1.rename(index=i)
print(df2)
------------------------------------------------------------------------------------------
Changing index in DataFrame, using axis parameter
import pandas as pd
d = {
"order_id": [11, 21, 31],
"customer_name": ["Prasad", "Daniel", "Jeswanth"],
"product": ["iPhone", "hTC", "macbook"]
}
df1 = pd.DataFrame(d)
print(df1)
df1.index = [77, 88, 99]
print()
print(df1)
------------------------------------------------------------------------------------------
Changing index in DataFrame, using index attribute.
import pandas as pd
df1 = pd.read_csv("sales31.csv")
print(df1)
df1.index = range(10, 20)
print()
print(df1)
------------------------------------------------------------------------------------------
changing columns and index in a dataframe
import pandas as pd
d = {
"Ord Id": [11, 21, 31],
"Customer Name": ["Prasad", "Daniel", "Jeswanth"],
"Product": ["iPhone", "hTC", "macbook"]
}
df1 = pd.DataFrame(d)
print(df1)
df1.index = [333, 444, 555]
df1.columns = ["order_id", "customer_name", "product"]
print()
print(df1)
------------------------------------------------------------------------------------------
converting columns lowercase to uppercase
import pandas as pd
df1 = pd.read_csv("sales3.csv")
print(df1.head())
df1.columns = df1.columns.str.upper()
print()
print(df1.head())
------------------------------------------------------------------------------------------
rename method -without inplace parameter
import pandas as pd
df1 = pd.read_csv("sales3.csv")
d = {
     "ord id": "order_id",
     "cust name": "customer_name",
     "prod name": "product_name",
     "prod cost":"product_cost"
}

print(df1.head())
df1.rename(columns=d)
print()
print(df1.head())
------------------------------------------------------------------------------------------
rename method -with inplace parameter
import pandas as pd
df1 = pd.read_csv("sales3.csv")
d = {
     "ord id": "order_id",
     "cust name": "customer_name",
     "prod name": "product_name",
     "prod cost":"product_cost"
}

print(df1.head())
df1.rename(columns=d,inplace = True)
print()
print(df1.head())
------------------------------------------------------------------------------------------
loading the fruits1 file
import pandas as pd                           NaN :- NOT A NUMBER
df1 = pd.read_csv("fruits1.csv")
print(df1)
------------------------------------------------------------------------------------------
isna() method
------------
By using these methods we can check missing values exist in DataFrame
or not.
import pandas as pd                               it gives Boolean values
df1 = pd.read_csv("fruits1.csv")
df2 = df1.isna()
print(df1.head())
print()
print(df2.head())
------------------------------------------------------------------------------------------
isnull() method-If missing values are available then it return as True, otherwise False
import pandas as pd          isnull() and isna() both methods works in same way
df1 = pd.read_csv("fruits1.csv")
df2 = df1.isnull()
print(df1.head())
print()
print(df2.head())
------------------------------------------------------------------------------------------
notnull() method:-If missing values are available then it return as False, otherwise True
import pandas as pd     
df1 = pd.read_csv("fruits1.csv")
df2 = df1.notnull()
print(df1.head())
print()
print(df2.head())
------------------------------------------------------------------------------------------
counting the missing value in each columns
import pandas as pd    By using isna() and sum() methods we can count the number of missing
values in each column.
df1 = pd.read_csv("fruits1.csv")
s = df1.isna().sum()
print(s)
------------------------------------------------------------------------------------------
counting the missing value in each cloumns with percentage
import pandas as pd
df1 = pd.read_csv("fruits1.csv")
s = df1.isna().sum()
per = (s*100)/len(df1)
print(per)
------------------------------------------------------------------------------------------
dropping  rows and where NaN values existing
import pandas as pd         This method drops the rows where at least one value is missing.        
df1 = pd.read_csv("fruits1.csv")
df2 = df1.dropna()
print(df2)
------------------------------------------------------------------------------------------
Dropping rows where NaN values existing and counting
import pandas as pd
df1 = pd.read_csv("fruits1.csv")
df2 = df1.dropna()
s = df2.isna().sum()
print(s)
------------------------------------------------------------------------------------------
Converting float column type into int data type
import pandas as pd                    we use astype to convert into data type 
df1 = pd.read_csv("fruits1.csv")
df2 = df1.dropna()
df3 = df2.astype(int)
print(df2.head())
print()
print(df3.head())
------------------------------------------------------------------------------------------
Dropping NaN values by using inplace parameter:-This method drops the rows and perform changes on existing DataFrame.
import pandas as pd
df1 = pd.read_csv("fruits1.csv")
df1.dropna(inplace = True)
print(df2)
------------------------------------------------------------------------------------------
fillna()method:-By using this method we can fill missing/NaN values with specific value.
# fillna(0) -> This method fill NaN with Zero values
# fillna(number) -> This method fill NaN with number
import pandas as pd
df1 = pd.read_csv("fruits1.csv")
df2 = df1.fillna(0)-----------we should give certain value(0,1,2,3,4,5,6,7,8,9,10)
print(df1.head())
print()
print(df2.head())
------------------------------------------------------------------------------------------
filling NaN values with specific value
import pandas as pd
import numpy as np
data = [
["Rajan", 26, 40000],
["Daniel", 16, 20000],
["Veeru", 45, 90000],
["Venkat", np.nan, 45000],
["Sumanth", 20, 95000],
["Shafi", np.nan, 97000]
]
df1 = pd.DataFrame(data, columns = ['Name', 'Age', 'Salary'])
df2 = df1.fillna(22)
print(df1)
print()
print(df2)
------------------------------------------------------------------------------------------
Creating dataframe and replacing nan values with specific value
import pandas as pd
import numpy as np
data = [
['Shahid', np.nan, 40000],
["Rajan", 26, 40000],
["Daniel", 16, 20000],
["Veeru", 45, 90000],
]
df1 = pd.DataFrame(data, columns = ['Name', 'Age', 'Salary'])
print(df1)
df2 = df1.replace(np.nan,0)
print()
print(df2)
------------------------------------------------------------------------------------------
Selecting single column from the DataFrame:-Based on requirement we can select columns from the DataFrame.
# If we select a single column then it returns the Series
import pandas as pd
df = pd.read_csv("sales1.csv")
print(df.Product)
------------------------------------------------------------------------------------------
Selecting single column from the DataFrame        another method selecting single column
import pandas as pd
df = pd.read_csv("sales1.csv")
s = df["Product"]
print(s)
------------------------------------------------------------------------------------------
selecting multiple columns in dataframe-Based on requirement we can select columns from the DataFrame.
# If we select more than one column then it returns the DataFrame.
import pandas as pd
df1 = pd.read_csv("sales1.csv")
cols = ["Customer Name", "Product"]
df2 = df1[cols]
print(df2)
------------------------------------------------------------------------------------------
Selecting single column from the DataFrame, apply total
import pandas as pd
df = pd.read_csv("sales1.csv")
total = df['Quantity'].sum()
print(total)
------------------------------------------------------------------------------------------
Based on requirement we can select specific column values from the
DataFrame
# By using Boolean condition we can select the data from
DataFrame.
import pandas as pd
df1 = pd.read_csv("sales1.csv")
print(df1)
------------------------------------------------------------------------------------------
Select specific customer from existing DataFrame
import pandas as pd
df1 = pd.read_csv("sales1.csv")
cust_name =df1["Customer Name"]=="Veeru"
print(df1[cust_name])
------------------------------------------------------------------------------------------
Select specific customer from existing DataFrame
import pandas as pd
df1 = pd.read_csv("sales1.csv")
prod_name =df1["Product"]=="Macbook Pro Laptop"
print(df1[prod_name])
------------------------------------------------------------------------------------------
iloc() indexer:-By using this we can get rows or columns at particular positions in the
index (so it only takes integers).
# This does not include the last element in DataFrame

import pandas as pd
df1 = pd.read_csv("sales2.csv")
print(df1)
------------------------------------------------------------------------------------------
If we select one row or column then it returns a Series.
import pandas as pd
df1 = pd.read_csv("sales2.csv")
s = df1.iloc[0]
print(s)
------------------------------------------------------------------------------------------
Selecting two row from the dataframe
import pandas as pd
df1 = pd.read_csv("sales2.csv")
s = df1.iloc[1]
print(s)
------------------------------------------------------------------------------------------
selecting last row from the dataframe
import pandas as pd
df1 = pd.read_csv("sales2.csv")
s = df1.iloc[-1]
print(s)
------------------------------------------------------------------------------------------
type error :- Cannot index by location index with a non-integer key
import pandas as pd
df = pd.read_csv('sales2.csv')
s = df.iloc["Order id"]
print(s)
-------------------------------------------------------------------------------------------
First column of the dataframe
import pandas as pd
df = pd.read_csv('sales2.csv')
s = df.iloc[:,0]
print(s)
----------------------------------------------------------------------------------------
Second column of the dataframe
import pandas as pd
df = pd.read_csv('sales2.csv')
s = df.iloc[:,1]
print(s)
------------------------------------------------------------------------------------------
last column from the dataframe
import pandas as pd
df = pd.read_csv('sales2.csv')
s = df.iloc[:,-1]
print(s)
-------------------------------------------------------------------------------------------
Selecting multiple rows and columns:-We can select single or multiple rows by using iloc indexer.
# If we select multiple rows and columns by using iloc indexer then
returns a DataFrame.
import pandas as pd
df = pd.read_csv('sales2.csv')
s = df.iloc[0:5]
print(s)
-----------------------------------------------------------------------------------------
First two columns of the dataframe with all rows
import pandas as pd
df = pd.read_csv('sales2.csv')
s = df.iloc[0:2]
print(s)
------------------------------------------------------------------------------------------
First three columns of the dataframe with all rows
import pandas as pd
df = pd.read_csv('sales2.csv')
s = df.iloc[0:3]
print(s)
------------------------------------------------------------------------------------------
first 5 rows and first 2 columns of the DataFrame
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df2 = df1.iloc[0:5,0:2]
print(df1)
print()
print("="*40)
print(df2)
------------------------------------------------------------------------------------------
first 5 rows and first 3 columns of the DataFrame
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df2 = df1.iloc[0:5,0:3]
print(df1)
print()
print("="*40)
print(df2)
------------------------------------------------------------------------------------------
loc[]-Selecting rows by label/index:-The loc[] indexer directly selects based on index values of any rows.
# For example, if we set index as Product then we can select the
specific product directly.
import pandas as pd               loading csv file
df1 = pd.read_csv('sales2.csv')
print(df1)
------------------------------------------------------------------------------------------
Setting index as a Product name and selecting DataFrame
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df1.set_index("Product name",inplace=True)
print(df1)
------------------------------------------------------------------------------------------
Setting index as a Product name and selecting Product
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df1.set_index("Product name",inplace=True)
a = 'iPhone 9'
df2 = df1.loc[a]
print(df2.head(10))
------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df1.set_index("Product name",inplace=True)
a = 'ThinkPad Laptop'
df2 = df1.loc[a]
print(df2.head(10))
------------------------------------------------------------------------------------------
Setting index as a Product name and selecting two products
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df1.set_index("Product name", inplace = True)
a = ['iPhone 9', 'iPhone 11']
df2 = df1.loc[a]
print(df2)
------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df1.set_index("Product name", inplace = True)
a = ['iPhone 9', 'ThinkPad Laptop']
b = ['Product cost', 'Customer id']
df2 = df1.loc[a, b]
print(df2)
------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df1.set_index("Product name", inplace = True)
a = ['iPhone 9', 'ThinkPad Laptop']
b = ['Product cost', 'Customer name']
df2 = df1.loc[a, b]
print(df2)
------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv('sales2.csv')
df1.set_index("Product name", inplace = True)
a = ['iPhone 8', 'Google Phone']
df2 = df1.loc[a, 'Order id' : 'Product cost']
print(df2)
------------------------------------------------------------------------------------------
Boolean / Logical indexing:-In most use cases, you will make selections based on the values of different columns in your data set.
import pandas as pd
df1 = pd.read_csv('sales2.csv')
a = df1['Product name']== 'LG Washing Machine'
df2 = df1.loc[a]
print(df2.head())
------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv('sales2.csv')
a = df1['Product name']== 'LG Washing Machine'
df2 = df1.loc[a, 'Order id' : 'Product cost']
print(df2.head())
------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv('sales2.csv')
a = df1['Customer name'] == 'Sagar'
df2 = df1.loc[a, 'Product name' : 'Product cost']
print(df2.head())
-------------------------------------------------------------------------------------------
Filtering:-Based on condition we can filter the data from DataFrame
import pandas as pd             loading csv file
df = pd.read_csv('sales4.csv')
print(df)
-------------------------------------------------------------------------------------------
By using relational operators:-Filtering DataFrame by using relational operator: Single condition
import pandas as pd
df1 = pd.read_csv("sales4.csv")
con1 = df1['Product_Cost'] > 65000
df2 = df1[con1]
print(df2)
-------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales4.csv")
con1 = df1['Product_Cost'] > 70000
df2 = df1[con1]
print(df2)
-------------------------------------------------------------------------------------------
Filtering DataFrame by using relational operator: Multiple conditions
import pandas as pd
df1 = pd.read_csv("sales4.csv")
con1 = df1['Product_Cost'] > 50000
con2 = df1['Product_Cost'] < 60000
df2 = df1[con1 & con2]
print(df2)
-------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales4.csv")
con1 = df1['Product_Cost'] > 50000
print("=="*50)
con2 = df1['Product_Cost'] < 60000
df2 = df1[con1 & con2]
print(df2)
-------------------------------------------------------------------------------------------
Filtering DataFrame by using relational operator: Multiple conditions
import pandas as pd
df1 = pd.read_csv("sales4.csv")
con1 = df1.Product_Name == "iPhone 11"
con2 = df1.Customer_Name == "Nireekshan"
df2 = df1[con1 & con2]
print(df2)
-------------------------------------------------------------------------------------------
Filtering DataFrame by using loc indexer
import pandas as pd
df1 = pd.read_csv("sales4.csv")
con1 = df1.Product_Name == "iPhone 11"
con2 = df1.Customer_Name == "Shahid"
df2 = df1.loc[con1 & con2]
print(df2)
-------------------------------------------------------------------------------------------
Filtering DataFrame by using iloc indexer
import pandas as pd
df1 = pd.read_csv("sales4.csv")
df2 = df1.iloc[0:5,]
print(df2)
-------------------------------------------------------------------------------------------
Rows position and column name:-
import pandas as pd
df1 = pd.read_csv("sales4.csv")
rows = df1.index[0:]
cols = ["Product_Name", "Customer_Id"]
df2 = df1.loc[rows, cols]
print(df2)
-------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales4.csv")
rows = df1.index[0:4]
cols = ["Product_Name", "Customer_Id"]
df2 = df1.loc[rows, cols]
print(df2)
-------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales4.csv")
rows = df1.index[5:]
cols = ["Product_Name", "Customer_Id"]
df2 = df1.loc[rows, cols]
print(df2)
---------------------------------------------------------------------------------------
Selecting multiple values of a column:- We can filter dataframe by providing multiple values of a column
import pandas as pd
df1 = pd.read_csv("sales4.csv")
a = df1.Product_Name == "LG Washing Machine"
b = df1.Customer_Id == 1
c = a | b
df2 = df1.loc[c]
print(df2)
-----------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales4.csv")
a = df1.Product_Name == "LG Washing Machine"
b = df1.Customer_Id == 25
c = a | b
df2 = df1.loc[c]
print(df2)
------------------------------------------------------------------------------------------
isin() method:-By using this method we can select data from DataFrame
import pandas as pd                Filtering DataFrame by using loc isin() method
df1 = pd.read_csv("sales4.csv")
a = ["Macbook Pro Laptop"]
b = df1.Product_Name.isin(a)
df2 = df1[b]
print(df2)
------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales4.csv")
a = ["34in Ultrawide Monitor", "Macbook Pro Laptop"]
b = df1.Product_Name.isin(a)
df2 = df1[b]
print(df2)
------------------------------------------------------------------------------------------
unique() function:-This function returns the unique values from the column.
import pandas as pd
df = pd.read_csv("sales4.csv")
a = pd.unique(df.Product_Name)
print(a)
print(len(a))
------------------------------------------------------------------------------------------
import pandas as pd
df = pd.read_csv("sales4.csv")
a = pd.unique(df.Customer_Name)
print(a)
print(len(a))

-------------------------------------------------------------------------------------------
Select Non-Missing Data from DataFrame:-notnull()method :-By using this function we can select the DataFrame which having non NaN values
import pandas as pd
import numpy as np
data = [
['Shahid', 21, 40000],
['Nireekshan', 22, 20000],
['Veeru', 45, 90000],
['Sumanth', 20, 95000],
[np.nan, 2, 99000],
['Prasad', 1, 41000]
]
c = ['Name', 'Age', 'Salary']
df1 = pd.DataFrame(data, columns = c)
print(df1)
-----------------------------------------------------------------------------------------
import pandas as pd                       notnull()method
import numpy as np
data = [
['Shahid', 21, 40000],
['Nireekshan', 22, 20000],
['Veeru', 45, 90000],
['Sumanth', 20, 95000],
[np.nan, 2, 99000],
['Prasad', 1, 41000]
]
c = ['Name', 'Age', 'Salary']
df1 = pd.DataFrame(data, columns = c)
d = df1.Name.notnull()
df2 = df1[d]
print(df1)
print()
print(df2)
-------------------------------------------------------------------------------------------
sorting:-DataFrame contains group of rows, column, index and values.
# Based on requirement we can applying sorting on column name, index etc.

import pandas as pd              loading csv file
df = pd.read_csv("sales4.csv")
print(df)
-----------------------------------------------------------------------------------------
sort_value(by="column name"):- This method sort the values based on column which we specified.
# Number default sorting is ascending order
# String default sorting is alphabetical order

import pandas as pd
df1 = pd.read_csv("sales4.csv")
df2 = df1.sort_values(by = "Product_Cost")
print(df2)
------------------------------------------------------------------------------------------
Sorting dataframe by using sort_values(p) method
import pandas as pd
df1 = pd.read_csv("sales4.csv")
df2 = df1.sort_values(by = "Customer_Id")
print(df2)
------------------------------------------------------------------------------------------
Sorting dataframe by using sort_values(p) method
import pandas as pd
df1 = pd.read_csv("sales4.csv")
df2 = df1.sort_values(by = "Customer_Id", ascending = False)
print(df2)
------------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales4.csv")
df2 = df1.sort_values(by = "Customer_Id", ascending = 0)
print(df2)
------------------------------------------------------------------------------------------
sort_index():-This method sort the indexes in DataFrame
import pandas as pd               it is used to keep output in order
d = {
'Order id': [11, 21, 31],
'Customer name': ['Kedar', 'Nireekshan', 'Daniel'],
'Product': ['iPhone 11','hTC', 'macbook']
}
i = [555, 444, 333]
df1 = pd.DataFrame(d, index = i)
df2 = df1.sort_index()
print(df1)
print()
print(df2)
------------------------------------------------------------------------------------------
groupby(p):-This method returns GroupBy object.

import pandas as pd
d = {
"Product": ["Samsung", "Nokia", "Samsung", "Motorola",
"Nokia", "Samsung", "Samsung"],
"Orders": [2, 4, 3, 4, 6, 7, 3]
}
df1 = pd.DataFrame(d)
print(df1)
-------------------------------------------------------------------------------------------
Creating products DataFrame, applying groupby
import pandas as pd               it used stored in single digit
d = {
"Product": ["Samsung", "Nokia", "Samsung", "Motorola",
"Nokia", "Samsung", "Samsung"],
"Orders": [2, 4, 3, 4, 6, 7, 3]
}
df1 = pd.DataFrame(d)
grouped = df1.groupby(["Product"])
result = grouped.sum()
print(df1)
print()
print(result)
-----------------------------------------------------------------------------------------
Get the number of product on count
import pandas as pd
df1 = pd.read_csv("sales5.csv")
grouped = df1.groupby(["Mail_Id"])
result = grouped.size()
print(result)
------------------------------------------------------------------------------------------
Get the number of product on count
import pandas as pd
df1 = pd.read_csv("sales5.csv")
grouped = df1.groupby(["Product_Name"])
result = grouped.size()
print(result)
------------------------------------------------------------------------------------------
How many products sold out on each month?
import pandas as pd
df1 = pd.read_csv("sales5.csv")
cols = ['Date', 'Product_Name']
grouped = df1.groupby(cols)['Date']
result = grouped.count()
print(result)
-------------------------------------------------------------------------------------------
Product wise each month sales
import pandas as pd
df1 = pd.read_csv("sales5.csv")
cols = ['Product_Name', 'Date']
grouped = df1.groupby(cols)['Date']
result = grouped.count()
print(result)
-----------------------------------------------------------------------------------------
Customer wise product details
import pandas as pd
df1 = pd.read_csv("sales5.csv")
col = ['Mail_Id', 'Product_Name']
grouped = df1.groupby(col)['Product_Cost']
result = grouped.sum()
print(result)
-----------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales5.csv")
col = ['Mail_Id', 'Product_Name']
grouped = df1.groupby(col, as_index = False)['Product_Cost']
result = grouped.sum()
print(result)
-----------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales5.csv")
col = ['Mail_Id']
grouped = df1.groupby(col)['Product_Cost']
result = grouped.sum()
print(result)
-----------------------------------------------------------------------------------------
Product wise whole sales
import pandas as pd
df1 = pd.read_csv("sales5.csv")
col = ['Product_Name']
grouped = df1.groupby(col)['Product_Cost']
result = grouped.sum()
print(result)
-----------------------------------------------------------------------------------------
Day wise product sales
import pandas as pd
df1 = pd.read_csv("sales5.csv")
col = ['Date']
grouped = df1.groupby(col)['Product_Cost']
result = grouped.sum()
print(result)
-----------------------------------------------------------------------------------------
Describe() method:-
import pandas as pd
df1 = pd.read_csv("sales5.csv")
df2 = df1['Product_Cost'].describe()
print(df2)
-----------------------------------------------------------------------------------------
Applying a single function to columns in groups:-
----------------------------------------------
FutureWarning: The provided callable <built-in function sum> is currently using SeriesGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string "sum" instead.
  result = grouped.agg(d)
import pandas as pd
df1 = pd.read_csv("sales5.csv")
d = {
'Product_Cost' : sum
}
cols = ['Date', 'Product_Name']
grouped = df1.groupby(cols)
result = grouped.agg(d)
print(result)
-----------------------------------------------------------------------------------------
import pandas as pd
df1 = pd.read_csv("sales5.csv")
d = {
'Product_Cost': sum,
'Product_Name': "count",
}
cols = ['Date', 'Product_Name']
grouped = df1.groupby(cols)
result = grouped.agg(d)
print(result)
-----------------------------------------------------------------------------------------
Applying a single function to columns in groups
import pandas as pd
df1 = pd.read_csv('sales5.csv')
d = {
'Product_Cost': [min, max, sum]
}
col = ['Product_Cost']
grouped = df1.groupby(col)
result = grouped.agg(d)
print(result)
-----------------------------------------------------------------------------------------
Inner join:-This inner join is a kind of intersection means, it keeps the common data.
merge(df1, df2, on = "column", how = "type")
syntax:- pd.merge(df1, df2, on = "column", how = "inner")

-----------------------------------------------------------------------------------------
creating the two dataframe
import pandas as pd
d1 = {
"Id": [1, 2, 3, 4, 5, 6],
"Name": ["Pradhan", "Venu", "Madhurima", "Nireekshan","Shafi", "Veeru"],
"Subject": ["English", "Java", "Html", "Python", "C", "dotnet"]
}
d2 = {
"Id": [11, 12, 13, 14, 15, 16],
"Name": ["Srinu", "Sumanth", "Neelima", "Daniel", "Arjun",
"Veeru"],
"Subject": ["Java", "Html", "Cpp", "Python", "C", "dot net"]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)
print(df1)
print()
print(df2)
-----------------------------------------------------------------------------------------
merging the two dataframe in single outcome
syntax:-pd.merge(df1, df2, on = "column", how = "inner")
import pandas as pd
d1 = {
"Id": [1, 2, 3, 4, 5, 6],
"Name": ["Pradhan", "Venu", "Madhurima", "Nireekshan","Shafi", "Veeru"],
"Subject": ["English", "Java", "Html", "Python", "C", "dotnet"]
}
d2 = {
"Id": [11, 12, 13, 14, 15, 16],
"Name": ["Srinu", "Sumanth", "Neelima", "Daniel", "Arjun",
"Veeru"],
"Subject": ["Java", "Html", "Cpp", "Python", "C", "dot net"]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)

inn_join = pd.merge(df1,df2,on = "Subject", how = "inner")
print(df1)
print()
print(df2)
print()
print(inn_join)
-----------------------------------------------------------------------------------------
left join:-Keep every row in the left dataframe.
# Where there are missing values of the "on" variable in the right dataframe filled with NaN values in the result.
syntax:-left_join = pd.merge(df1,df2,on = "Subject", how = "left")

import pandas as pd
d1 = {
"Id": [1, 2, 3, 4, 5, 6],
"Name": ["Pradhan", "Venu", "Madhurima", "Nireekshan","Shafi", "Veeru"],
"Subject": ["English", "Java", "Html", "Python", "C", "dotnet"]
}
d2 = {
"Id": [11, 12, 13, 14, 15, 16],
"Name": ["Srinu", "Sumanth", "Neelima", "Daniel", "Arjun",
"Veeru"],
"Subject": ["Java", "Html", "Cpp", "Python", "C", "dot net"]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)

left_join = pd.merge(df1,df2,on = "Subject", how = "left")
print(df1)
print()
print(df2)
print()
print(left_join)
-----------------------------------------------------------------------------------------
right join:-Keep every row in the right dataframe.
# Where there are missing values of the "on" variable in the left column filled with NaN values in the result.
syntax:-right_join = pd.merge(df1,df2,on = "Subject", how = "right")

import pandas as pd
d1 = {
"Id": [1, 2, 3, 4, 5, 6],
"Name": ["Pradhan", "Venu", "Madhurima", "Nireekshan","Shafi", "Veeru"],
"Subject": ["English", "Java", "Html", "Python", "C", "dotnet"]
}
d2 = {
"Id": [11, 12, 13, 14, 15, 16],
"Name": ["Srinu", "Sumanth", "Neelima", "Daniel", "Arjun",
"Veeru"],
"Subject": ["Java", "Html", "Cpp", "Python", "C", "dot net"]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)

right_join = pd.merge(df1,df2,on = "Subject", how = "right")
print(df1)
print()
print(df2)
print()
print(right_join)
-----------------------------------------------------------------------------------------
outer merge/full outer join:-A full outer join returns all the rows from the left and right DataFrames.
# Where there is no common data there it will be fills with NaN values.
syntax:-outer_join = pd.merge(df1, df2, on = "Subject", how = "outer")
import pandas as pd
d1 = {
"Id":[1, 2, 3, 4, 5, 6],
"Name": ["Pradhan", "Venu", "Madhurima", "Nireekshan",
"Shafi", "Veeru"],
"Subject":["English", "Java", "Html", "Python", "C", "dot
net"]
}
d2 = {
"Id":[11, 12, 13, 14, 15, 16],
"Name": ["Srinu", "Sumanth", "Neelima", "Daniel", "Arjun",
"Veeru"],
"Subject":["Java", "Html", "Cpp", "Python", "C", "dot net"]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)
outer_join = pd.merge(df1, df2, on = "Subject", how = "outer")
print(df1)
print()
print(df2)
print()
print(outer_join)
-----------------------------------------------------------------------------------------
 Other type of joins:-
 One to one
 Many to one
 Many to many
-----------------------------------------------------------------------------------------
one to one:-This is very simple join and similar to the column-wise concatenation
syntax:- one_one = pd.merge(df1, df2)
import pandas as pd
d1 = {
"Employee": ["Nireekshan", "Veeru", "Lavanya", "Pradhan"],
"Group": ["Development", "Testing", "Testing", "HR"]
}
d2 = {
"Employee": ["Lavanya", "Nireekshan", "Veeru", "Pradhan"],
"Hire_date": [2010, 2012, 2014, 2016]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)
one_one = pd.merge(df1, df2)
print(df1)
print()
print(df2)
print()
print(one_one)
-----------------------------------------------------------------------------------------
Many to one:-Many-to-one joins are joins in which one of the two key columns contains duplicate entries
syntax:-many_one = pd.merge(one_one, df3)
import pandas as pd
d1 = {
"Employee": ["Nireekshan", "Veeru", "Lavanya", "Pradhan"],
"Group": ["Development", "Testing", "Testing", "HR"]
}
d2 = {
"Employee": ["Lavanya", "Nireekshan", "Veeru", "Pradhan"],
"Hire_date": [2010, 2012, 2014, 2016]
}
d3 = {
"Group": ["Testing", "Development", "HR"],
"supervisor": ["Shafi", "Daniel", "Neelima"]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)
df3 = pd.DataFrame(d3)
one_one = pd.merge(df1, df2)
many_one = pd.merge(one_one, df3)
print(df1)
print()
print(df2)
print()
print(many_one)
---------------------------------------------------------------------------------------
Many to many:- If the key column in both the left and right DataFrame contains duplicates, then the result is a many-to-many merge
syntax:-many_many = pd.merge(df1, df2)
import pandas as pd
d1 = {
"Employee": ["Nireekshan", "Veeru", "Lavanya", "Pradhan"],
"Group": ["Development", "Testing", "Testing", "HR"]
}
d2 = {
"Group": ["Testing", "Testing", "Development",
"Development", "HR", "HR"],
"Skills": ["Manual", "Automation", "Coding", "Logical",
"Spreadsheets", "Organization"]
}

df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)
many_many = pd.merge(df1, df2)
print(df1)
print()
print(df2)
print()
print(many_many)
-----------------------------------------------------------------------------------------
Based on column wise:-We can also do merge DataFrames based on columns wise as well
syntax:-result = pd.merge(df1, df2, on = 'Subject')
import pandas as pd
d1 = {
"Id":[1, 2, 3, 4, 5, 6],
"Name": ["Pradhan", "Venu", "Madhurima", "Nireekshan",
"Shafi", "Veeru"],
"Subject":["English", "Java", "Html", "Python", "C", "dot
net"]
}
d2 = {
"Id":[11, 12, 13, 14, 15, 16],
"Name": ["Srinu", "Sumanth", "Neelima", "Daniel", "Arjun",
"Veeru"],
"Subject":["Java", "Html", "Cpp", "Python", "C", "dot net"]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)
result = pd.merge(df1, df2, on = 'Subject')
print(df1)
print()
print(df2)
print()
print(result)
-----------------------------------------------------------------------------------------
Merging two DataFrames with multiple columns
import pandas as pd
d1 = {
"Id":[1, 2, 3, 4, 5, 6],
"Name": ["Pradhan", "Venu", "Madhurima", "Nireekshan",
"Shafi", "Veeru"],
"Subject":["English", "Java", "Html", "Python", "C", "dot
net"]
}
d2 = {
"Id":[11, 12, 13, 14, 15, 16],
"Name": ["Srinu", "Sumanth", "Neelima", "Daniel", "Arjun",
"Veeru"],
"Subject":["Java", "Html", "Cpp", "Python", "C", "dot net"]
}
df1 = pd.DataFrame(d1)
df2 = pd.DataFrame(d2)
result = pd.merge(df1, df2, on=["Name", "Subject"])
print(df1)
print()
print(df2)
print()
print(result)
-----------------------------------------------------------------------------------------
concat(p):-This function concatenate one DataFrame to another DataFrame
import pandas as pd
d1 = [[11, 22], [33, 44]]
d2 = [[55, 66], [77, 88]]
c1 = ["A", "B"]
df1 = pd.DataFrame(d1, columns = c1)
df2 = pd.DataFrame(d2, columns = c1)
print(df1)
print()
print(df2)
-----------------------------------------------------------------------------------------
Concatenating one DataFrame to another DataFrame
import pandas as pd
d1 = [[11, 22], [33, 44]]
d2 = [[55, 66], [77, 88]]
c1 = ["A", "B"]
df1 = pd.DataFrame(d1, columns = c1)
df2 = pd.DataFrame(d2, columns = c1)
result =[df1,df2]
df3 = pd.concat(result)
print(df1)
print()
print(df2)
print()
print(df3)
-----------------------------------------------------------------------------------------
import pandas as pd
d1 = [[11, 22], [33, 44]]
d2 = [[55, 66], [77, 88]]
c1 = ["A", "B"]
df1 = pd.DataFrame(d1, columns = c1)
df2 = pd.DataFrame(d2, columns = c1)
result =[df1,df2]
df3 = pd.concat(result,ignore_index = True)
print(df1)
print()
print(df2)
print()
print(df3)
-----------------------------------------------------------------------------------------
import pandas as pd
d1 = [[11, 22], [33, 44]]
d2 = [[55, 66], [77, 88],[188,199]]
c1 = ["A", "B"]
df1 = pd.DataFrame(d1, columns = c1)
df2 = pd.DataFrame(d2, columns = c1)
result =[df1,df2]
df3 = pd.concat(result)
print(df1)
print()
print(df2)
print()
print(df3)
-----------------------------------------------------------------------------------------
import pandas as pd
d1 = [[11, 22], [33, 44]]
d2 = [[55, 66], [77, 88],[188,199]]
c1 = ["A", "B"]
c2 = ["X","Y"]
df1 = pd.DataFrame(d1, columns = c1)
df2 = pd.DataFrame(d2, columns = c2)
print(df1)
print()
print(df2)
-----------------------------------------------------------------------------------------
import pandas as pd
d1 = [[11, 22], [33, 44]]
d2 = [[55, 66], [77, 88],[188,199]]
c1 = ["A", "B"]
c2 = ["X","Y"]
df1 = pd.DataFrame(d1, columns = c1)
df2 = pd.DataFrame(d2, columns = c2)
result = [df1,df2]
df3 = pd.concat(result,axis=1)
print(df1)
print()
print(df2)
print()
print(df3)
-----------------------------------------------------------------------------------------
Adding column to DataFrame:-Based on requirement we can add column to existing DataFrame
Creating DataFrame
import pandas as pd
df = pd.read_csv("sales8.csv")
print(df.head(5))
-----------------------------------------------------------------------------------------
Adding Status column to DataFrame
import pandas as pd
df = pd.read_csv("sales8.csv")
df['status'] = "Delivered"
print(df.head(5))
-----------------------------------------------------------------------------------------
Adding Total cost column to DataFrame
import pandas as pd
df = pd.read_csv("sales8.csv")
df["Total Cost"] = df['Product cost']*df['Quantity']
print(df.head(5))
                                  (or)
Adding Total cost column to DataFrame by using apply method
import pandas as pd
df = pd.read_csv('sales8.csv')
def total(df):
    t = df['Product cost']*df['Quantity']
    return t
df['Total cost'] = df.apply(total, axis = 1)
print(df.head())
-------------------------------------------------------------------------------------------
Adding total cost column to DataFrame in a specific position
import pandas as pd
df = pd.read_csv('sales8.csv')
print(df.head())
new = df['Product cost']*df['Quantity']
df.insert(5,"Total Cost",new)
print()
print(df.head())
-------------------------------------------------------------------------------------------
Dropping columns from DataFrame:- Based on requirement we can drop column from existing DataFrame
import pandas as pd
df1 = pd.read_csv('sales8.csv')
df2 = df1.drop(columns = 'Customer name')
print(df1.head())
print()
print(df2.head())
-------------------------------------------------------------------------------------------
Dropping the multiple columns
import pandas as pd
df1 = pd.read_csv('sales8.csv')
df2 = df1.drop(['Customer name', 'Product name'], axis = 1)
print(df1.head())
print()
print(df2.head())
-------------------------------------------------------------------------------------------
Dropping rows from the dataframe:- We can drop the rows from DataFrame by using drop method
dropping the single row
import pandas as pd
df1 = pd.read_csv('sales8.csv')
df2 = df1.drop(3,axis = 0)
print(df1.head())
print()
print(df2.head())
-------------------------------------------------------------------------------------------
drpping the multiple row 
import pandas as pd
df1 = pd.read_csv('sales8.csv')
df2 = df1.drop([1,2],axis = 0)
print(df1.head())
print()
print(df2.head())
-------------------------------------------------------------------------------------------
 Date data type:-Whenever we load csv file, if that file contains any column having date
values then by default pandas will consider that column as object
# We can provide parse_dates = ['name of the column1', 'name of the
column2'] then pandas considered those columns as datetime data type
import pandas as pd
df = pd.read_csv('sales7_dates.csv')
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
Loading csv file by using parse_dates parameter
import pandas as pd
df = pd.read_csv('sales7_dates.csv',parse_dates= ['Pur_Date'])
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
to_datetime(p) function:-This function convert from object data type into date data type.
Loading csv file and converting Pur_Date column into Date format
import pandas as pd
df = pd.read_csv('sales7_dates.csv')
df['Pur_Date'] = pd.to_datetime(df['Pur_Date'])
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
astype(p):-This method convert from object data type into datetime data type.

import pandas as pd
df = pd.read_csv('sales7_dates.csv')
df['Pur_Date'] = df['Pur_Date'].astype('datetime64[ns]')
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
Format parameter:-We can represent the date formats in different ways,
o March 23rd, 2015 as "03-23-15" or "3|23|2015" and etc
# So, we can use the format parameter to specify the exact format of the
string.
data = {
'Product': ['Samsung', 'iPhone', 'Motorola'],
'Status': ['Success', 'Success', 'Failed'],
'Cost': [10000, 50000, 15000],
'PurDate': ['20190902','20190913','20190921'],
}
df = pd.DataFrame(data)
print(df.head())
print()
print(df.dtypes)

                                     (or)
Converting Date with specific format
import pandas as pd
data = {
'Product': ['Samsung', 'iPhone', 'Motorola'],
'Status': ['Success', 'Success', 'Failed'],
'Cost': [10000, 50000, 15000],
'PurDate': ['20190902','20190913','20190921'],
}
df = pd.DataFrame(data)
df['PurDate'] = pd.to_datetime(df['PurDate'])
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
import pandas as pd

data = {
"Product": ["Samsung", "iPhone", "Motorola"],
"Status": ["Success", "Success", "Failed"],
"Cost": [10000, 50000, 15000],
"PurDate": ['02092019','13092019','21092019'],
}
df = pd.DataFrame(data)
df['PurDate'] = pd.to_datetime(df['PurDate'], format = '%d%m%Y')
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
import pandas as pd
data = {
"Product": ["Samsung", "iPhone", "Motorola"],
"Status": ["Success", "Success", "Failed"],
"Cost": [10000, 50000, 15000],
"PurDate": ['02Sep2019','13Sep2019','21Sep2019'],
}
df = pd.DataFrame(data)
df['PurDate'] = pd.to_datetime(df['PurDate'])
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
import pandas as pd
data = {
"Product": ["Samsung", "iPhone", "Motorola"],
"Status": ["Success", "Success", "Failed"],
"Cost": [10000, 50000, 15000],
"PurDate":
['20190902093000','20190913093000','20190921200000'],
}
df = pd.DataFrame(data)
df['PurDate'] = pd.to_datetime(df['PurDate'])
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
NaT values :-By using errors = "coerce" keyword argument we can solve this problem.
# This argument converts Date column missing values into NaT (Not aTime) values.
# Coerce errors i.e. convert un parse able date into NaT (Not a Time)
creating the dataframe
import pandas as pd
data = {
"Product": ["Samsung", "iPhone", "Motorola"],
"Status": ["Success", "Success", "Failed"],
"Cost": [10000, 50000, 15000],
"PurDate": ['02-Sep-2019','Here date is missing','21-Sep-2019']
}
df = pd.DataFrame(data)
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
Converting Date with specific format: Error
import pandas as pd
data = {
"Product": ["Samsung", "iPhone", "Motorola"],
"Status": ["Success", "Success", "Failed"],
"Cost": [10000, 50000, 15000],
"PurDate": ['02-Sep-2019','Here date is missing','21-Sep-2019']
}
df = pd.DataFrame(data)
df['PurDate'] = pd.to_datetime(df['PurDate'])
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
to_datetime(p) function:-
import pandas as pd
data = {
"Product": ["Samsung", "iPhone", "Motorola"],
"Status": ["Success", "Success", "Failed"],
"Cost": [10000, 50000, 15000],
"PurDate": ['02-Sep-2019','Here date is missing','21-Sep-2019']
}
df = pd.DataFrame(data)
df['PurDate'] = pd.to_datetime(df['PurDate'], errors="coerce")
print(df.head())
print()
print(df.dtypes)
-------------------------------------------------------------------------------------------
Selecting from start to end date values:- Based on requirement we can select specific dates, like
# Start date to end date
Selecting Dataframe in between the dates

import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates=['Pur_Date'])
start = df['Pur_Date'] > '2019-1-1 01:00:00'
end = df['Pur_Date'] < '2019-1-1 05:00:00'
result = df[start & end]
print(result)
-------------------------------------------------------------------------------------------
Access specific dates like last 20 days or 2 months or 2 years records
import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates = ['Pur_Date'])
print(df.head())
-------------------------------------------------------------------------------------------
Accessing last 10 days records
import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates = ['Pur_Date'])
new_df = df.set_index("Pur_Date")
days_10 = new_df.last("10D")
print(days_10)
                               (or)
Accessing the 24days records
import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates = ['Pur_Date'])
new_df = df.set_index("Pur_Date")
days_24 = new_df.last("24D")
print(days_24)
                                (or)
Accessing the 40 days records
import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates = ['Pur_Date'])
new_df = df.set_index("Pur_Date")
days_40= new_df.last("40D")
print(days_40)
                                           (or)
Accessing one month records
import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates = ['Pur_Date'])
new_df = df.set_index("Pur_Date")
month_1= new_df.last("1M")
print(month_1)
                                 (or)
Accessing last 1 year records
import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates = ['Pur_Date'])
new_df = df.set_index("Pur_Date")
year_1= new_df.last("1Y")
print(year_1)
-------------------------------------------------------------------------------------------
Extract year, month, day from Date column:-Based on requirement we can get year, month, day, hour, minute from
Date column.
# Sometimes it can be useful to break up a column of dates intocomponents.
Breaking up the Date column value into multiple features
import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates = ['Pur_Date'])
df['year'] = df['Pur_Date'].dt.year
df['month'] = df['Pur_Date'].dt.month
df['day'] = df['Pur_Date'].dt.day
print(df.head())
-------------------------------------------------------------------------------------------
Breaking up the Date column value into multiple features
import pandas as pd
df = pd.read_csv('sales7_dates.csv', parse_dates = ['Pur_Date'])
df['year'] = df['Pur_Date'].dt.year
df['month'] = df['Pur_Date'].dt.month
df['day'] = df['Pur_Date'].dt.day
df['hour'] = df['Pur_Date'].dt.hour
df['minute'] = df['Pur_Date'].dt.minute
print(df.head())
-------------------------------------------------------------------------------------------
Encoding Days of the Week:-We can get the day of the week for each date by using pandas
# Knowing the days names will helpful to understand the business
flow, like we can compare total sales on specific day for the past
three years.
Encoding Days of the Week

import pandas as pd
data = {
'Product': ['Samsung', 'iPhone', 'Motorola'],
'Status': ['Success', 'Success', 'Failed'],
'Cost': [10000, 50000, 15000],
'PurDate': ['2018-01-01','2018-01-02','2018-01-03'],
}
df = pd.DataFrame(data)
df['PurDate'] = pd.to_datetime(df['PurDate'])
print(df.head())
print()
print(df["PurDate"].dt.day_name())
-------------------------------------------------------------------------------------------
Encoding Days of the Week
import pandas as pd
data = {
'Product': ['Samsung', 'iPhone', 'Motorola'],
'Status': ['Success', 'Success', 'Failed'],
'Cost': [10000, 50000, 15000],
'PurDate': ['2018-01-01','2018-01-02','2018-01-03'],
}
df = pd.DataFrame(data)
df['PurDate'] = pd.to_datetime(df['PurDate'])
print(df.head())
print()
print(df['PurDate'].dt.weekday)
-------------------------------------------------------------------------------------------
Loading csv files from all files
 The very first step is we need to access all files from specific folder.
 From that folder we need to capture only csv files.
-------------------------------------------------------------------------------------------
os module
 os is a predefined module in python.
 By using this module we can load all files from the folder.
-------------------------------------------------------------------------------------------
listdir(p) function
 listdir(p) is a predefined function in os module
 This function we should access with os module name.
 By using this function we can get all file names from folder.
 This function returns all file names in list.
Accessing all files from the folder(daniel/jan_sales.csv,....,dec_sales.csv [15 files])
import os
path = "./daniel"
all_files = os.listdir(path)
print(all_files)
-------------------------------------------------------------------------------------------
filter(p1, p2) function
 filter(p1, p2) is a predefined function in python
 We can access this function directly.
 By using this function we can apply Boolean logic and get results
accordingly.
Accessing only csv files from folder(daniel/jan_sales.csv,....,dec_sales.csv)
import os
path = "./daniel.listdir(path)
f = filter(lambda name: name.endswith('.csv'), all_files)
csv_files = list(f)
print(all_files)
print()
print(csv_files)
------------------------------------------------------------------------------------------- Concatenating all csv file
 Once we loaded all csv file then we can concatenate all csv file.
 Based on requirement by using pandas we can concatenate all csv files into one csv file
Concatenating all csv files(daniel/jan_sales.csv,....,dec_sales.csv [12 files])
import os
import glob
import pandas as pd
p = '.\daniel'
files = os.path.join(p, "*.csv")
csv_files = glob.glob(files)
result = (pd.read_csv(every) for every in csv_files)
df = pd.concat(result, ignore_index = True)
print(df)
df.to_csv("year.csv", index = False)
-------------------------------------------------------------------------------------------
Loading yearly.csv file
import pandas as pd
df = pd.read_csv("year.csv", parse_dates = ["Date"])
print(df)


https://easyengineering.net/quantitative-aptitude-formulas-basics-concept/#  
 total books